/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
function t(key, params = {}) {
  const i18n = window.i18n;
  if (!i18n)
    return key;
  let text = i18n.t(`folder-tag-plugin:${key}`);
  Object.entries(params).forEach(([key2, value]) => {
    text = text.replace(`{${key2}}`, value);
  });
  return text;
}
var TagSelectionModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.selectedFolderTag = null;
    this.selectedOtherTags = [];
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const existingTags = /* @__PURE__ */ new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFile) {
        const cache = this.app.metadataCache.getFileCache(file);
        if (cache == null ? void 0 : cache.tags) {
          cache.tags.forEach((tag) => existingTags.add(tag.tag.slice(1)));
        }
      }
    });
    const folderNames = /* @__PURE__ */ new Set();
    this.app.vault.getAllLoadedFiles().forEach((file) => {
      if (file instanceof import_obsidian.TFolder) {
        folderNames.add(file.name);
      }
    });
    const folderMatchingTags = Array.from(existingTags).filter((tag) => folderNames.has(tag));
    const otherTags = Array.from(existingTags).filter((tag) => !folderNames.has(tag));
    const tagContainer = contentEl.createDiv("tag-selection-container");
    const folderTagsContainer = tagContainer.createDiv("folder-tags");
    folderTagsContainer.createEl("h3", { text: t("folderMatchingTags") });
    const folderTagListEl = folderTagsContainer.createDiv("tag-list");
    folderMatchingTags.forEach((tag) => {
      const tagEl = folderTagListEl.createDiv("tag-item");
      tagEl.createSpan({ text: `#${tag}` });
      const radio = tagEl.createEl("input", { type: "radio" });
      radio.setAttribute("name", "folderTag");
      radio.addEventListener("change", () => {
        if (radio.checked) {
          this.selectedFolderTag = tag;
        } else {
          this.selectedFolderTag = null;
        }
      });
    });
    const otherTagsContainer = tagContainer.createDiv("other-tags");
    otherTagsContainer.createEl("h3", { text: t("otherTags") });
    const otherTagListEl = otherTagsContainer.createDiv("tag-list");
    otherTags.forEach((tag) => {
      const tagEl = otherTagListEl.createDiv("tag-item");
      tagEl.createSpan({ text: `#${tag}` });
      const checkbox = tagEl.createEl("input", { type: "checkbox" });
      checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
          this.selectedOtherTags.push(tag);
        } else {
          this.selectedOtherTags = this.selectedOtherTags.filter((t2) => t2 !== tag);
        }
      });
    });
    const newTagContainer = tagContainer.createDiv("new-tag");
    newTagContainer.createEl("h3", { text: t("newTag") });
    const inputContainer = newTagContainer.createDiv("input-container");
    const input = inputContainer.createEl("input", { type: "text", placeholder: t("enterNewTag") });
    const addButton = inputContainer.createEl("button", { text: t("add") });
    const createFolderContainer = newTagContainer.createDiv("create-folder-option");
    const createFolderCheckbox = createFolderContainer.createEl("input", { type: "checkbox" });
    createFolderCheckbox.setAttribute("id", "createFolderCheckbox");
    createFolderContainer.createEl("label", { text: t("createFolderOption"), attr: { for: "createFolderCheckbox" } });
    addButton.addEventListener("click", async () => {
      const newTag = input.value.trim().replace(/^#/, "");
      if (newTag && !this.selectedOtherTags.includes(newTag) && !folderMatchingTags.includes(newTag)) {
        if (createFolderCheckbox.checked) {
          try {
            await this.app.vault.createFolder(newTag);
            this.selectedFolderTag = newTag;
            const folderTagListEl2 = folderTagsContainer.querySelector(".tag-list");
            if (folderTagListEl2) {
              const tagEl = folderTagListEl2.createDiv("tag-item");
              tagEl.createSpan({ text: `#${newTag}` });
              const radio = tagEl.createEl("input", { type: "radio" });
              radio.setAttribute("name", "folderTag");
              radio.checked = true;
              radio.addEventListener("change", () => {
                if (radio.checked) {
                  this.selectedFolderTag = newTag;
                } else {
                  this.selectedFolderTag = null;
                }
              });
            }
            new import_obsidian.Notice(t("createdTagAndFolder", { tag: newTag, folder: newTag }));
          } catch (error) {
            console.error("Error creating folder:", error);
            new import_obsidian.Notice(t("failedToCreateFolder", { folder: newTag }));
            return;
          }
        } else {
          this.selectedOtherTags.push(newTag);
          const otherTagListEl2 = otherTagsContainer.querySelector(".tag-list");
          if (otherTagListEl2) {
            const tagEl = otherTagListEl2.createDiv("tag-item");
            tagEl.createSpan({ text: `#${newTag}` });
            const checkbox = tagEl.createEl("input", { type: "checkbox" });
            checkbox.checked = true;
            checkbox.addEventListener("change", () => {
              if (checkbox.checked) {
                this.selectedOtherTags.push(newTag);
              } else {
                this.selectedOtherTags = this.selectedOtherTags.filter((t2) => t2 !== newTag);
              }
            });
          }
          new import_obsidian.Notice(t("addedTag", { tag: newTag }));
        }
        input.value = "";
      }
    });
    const submitButtonContainer = contentEl.createDiv("modal-button-container");
    const submitButton = submitButtonContainer.createEl("button", { text: t("applyTags") });
    submitButton.addEventListener("click", () => {
      const selectedTags = [
        ...this.selectedFolderTag ? [this.selectedFolderTag] : [],
        ...this.selectedOtherTags.filter((tag) => tag.trim() !== "")
      ];
      this.onSubmit(selectedTags);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var FolderTagPlugin = class extends import_obsidian.Plugin {
  async onload() {
    setTimeout(() => {
      this.initializePlugin();
    }, 2e3);
  }
  async initializePlugin() {
    await this.loadSettings();
    this.addCommand({
      id: "add-folder-tag",
      name: "Add Folder Tag",
      callback: () => {
        const activeFile = this.app.workspace.getActiveFile();
        if (activeFile) {
          this.addFolderTag(activeFile);
        }
      }
    });
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if (file instanceof import_obsidian.TFile) {
          this.handleNewFile(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian.TFile) {
          this.handleFileMove(file, oldPath);
        }
      })
    );
    this.addSettingTab(new SampleSettingTab(this.app, this));
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
      new import_obsidian.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "list-vault-folders",
      name: "List all folders in vault",
      callback: () => {
        const files = this.app.vault.getAllLoadedFiles();
        const folders = files.filter((file) => file instanceof import_obsidian.TFolder);
        new import_obsidian.Notice(t("foundFolders", {
          count: folders.length.toString(),
          folders: folders.map((folder) => folder.path).join("\n")
        }));
        console.log("Vault folders:", folders);
      }
    });
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    const appendTagsToFile = async (file, tags) => {
      try {
        const content = await this.app.vault.read(file);
        const newTags = tags.filter((tag) => {
          const tagWithoutHash = tag.replace(/^#/, "");
          return !content.match(new RegExp(`#${tagWithoutHash}\\b`));
        }).map((tag) => tag.replace(/^#/, ""));
        if (newTags.length === 0) {
          console.log("No new tags to add");
          return;
        }
        const newContent = `${newTags.map((tag) => `#${tag}`).join(" ")}

${content}`;
        await this.app.vault.modify(file, newContent);
        console.log(`Added tags ${newTags.map((tag) => `#${tag}`).join(", ")} to file: ${file.path}`);
        this.app.workspace.trigger("file-change", file);
        this.app.workspace.trigger("graph:refresh");
        console.log("Graph view refreshed");
      } catch (error) {
        console.error("Error appending tags to file:", error);
      }
    };
    const addFolderTagsToAllFiles = async (folder) => {
      const files = folder.children.filter((file) => file instanceof import_obsidian.TFile);
      let processedCount = 0;
      let skippedCount = 0;
      for (const file of files) {
        try {
          const content = await this.app.vault.read(file);
          if (!content.includes(`#${folder.name}`)) {
            await appendTagsToFile(file, [folder.name]);
            processedCount++;
          } else {
            skippedCount++;
          }
        } catch (error) {
          console.error(`Error processing file ${file.path}:`, error);
        }
      }
      return { processedCount, skippedCount };
    };
    this.addCommand({
      id: "add-folder-tag-to-current-file",
      name: "Add parent folder tag to current file",
      callback: () => {
        const file = this.app.workspace.getActiveFile();
        if (file && file.parent) {
          appendTagsToFile(file, [file.parent.name]);
          new import_obsidian.Notice(`Added tag #${file.parent.name} to current file`);
        } else {
          new import_obsidian.Notice("No file is currently open");
        }
      }
    });
    this.addCommand({
      id: "add-folder-tags-to-all-files",
      name: "Add folder tag to all files in current folder",
      callback: () => {
        const file = this.app.workspace.getActiveFile();
        if (file && file.parent instanceof import_obsidian.TFolder) {
          addFolderTagsToAllFiles(file.parent).then(({ processedCount, skippedCount }) => {
            new import_obsidian.Notice(`Added folder tags to ${processedCount} files (${skippedCount} files already had the tag)`);
          });
        } else {
          new import_obsidian.Notice("No file is currently open in a folder");
        }
      }
    });
    const moveFileToTagFolder = async (file, tag) => {
      try {
        const tagWithoutHash = tag.replace(/^#/, "");
        const targetFolder = this.app.vault.getAllLoadedFiles().find(
          (f) => f instanceof import_obsidian.TFolder && f.name === tagWithoutHash
        );
        if (targetFolder) {
          await this.app.fileManager.renameFile(file, `${targetFolder.path}/${file.name}`);
          console.log(`Moved file ${file.path} to folder ${targetFolder.path}`);
          new import_obsidian.Notice(t("movedFileToFolder", { tag: tagWithoutHash }));
          this.app.workspace.trigger("file-change", file);
          this.app.workspace.trigger("graph:refresh");
          console.log("Graph view refreshed after file movement");
        } else {
          console.log(`No folder found matching tag: ${tagWithoutHash}`);
        }
      } catch (error) {
        console.error("Error moving file to tag folder:", error);
      }
    };
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        console.log("Vault create event triggered:", file.path);
        if (file instanceof import_obsidian.TFile) {
          const folder = file.parent;
          if (folder) {
            new import_obsidian.Notice(t("newFileCreated", {
              path: file.path,
              folder: folder.path
            }));
            console.log("New file created (create event):", {
              fileName: file.name,
              filePath: file.path,
              folderName: folder.name,
              folderPath: folder.path,
              creationTime: file.stat.ctime,
              modificationTime: file.stat.mtime
            });
            new TagSelectionModal(this.app, async (selectedTags) => {
              const validTags = [...new Set(selectedTags.filter((tag) => tag.trim() !== ""))];
              if (folder.name.trim() !== "") {
                validTags.push(folder.name);
              }
              if (validTags.length > 0) {
                await appendTagsToFile(file, validTags);
                new import_obsidian.Notice(t("addedTags", {
                  tags: validTags.map((tag) => `#${tag}`).join(", ")
                }));
                for (const tag of validTags) {
                  await moveFileToTagFolder(file, tag);
                }
                this.app.workspace.trigger("file-change", file);
                this.app.workspace.trigger("graph:refresh");
                console.log("Graph view refreshed after tag operations");
              }
            }).open();
          }
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        console.log("Workspace file-open event triggered:", file == null ? void 0 : file.path);
        if (file instanceof import_obsidian.TFile) {
          const folder = file.parent;
          if (folder) {
            console.log("File opened:", {
              fileName: file.name,
              filePath: file.path,
              folderName: folder.name,
              folderPath: folder.path,
              creationTime: file.stat.ctime,
              modificationTime: file.stat.mtime
            });
          }
        }
      })
    );
  }
  getFolderTag(filePath) {
    const pathParts = filePath.split("/");
    if (pathParts.length > 1) {
      return pathParts[pathParts.length - 2];
    }
    return null;
  }
  async addTagToFile(file, tag) {
    const content = await this.app.vault.read(file);
    const frontmatter = this.getFrontmatter(content);
    const tags = this.getTags(frontmatter);
    if (!tags.includes(tag)) {
      tags.push(tag);
      const newContent = this.updateFrontmatter(content, tags);
      await this.app.vault.modify(file, newContent);
    }
  }
  async removeTagFromFile(file, tag) {
    const content = await this.app.vault.read(file);
    const frontmatter = this.getFrontmatter(content);
    const tags = this.getTags(frontmatter);
    const index = tags.indexOf(tag);
    if (index > -1) {
      tags.splice(index, 1);
      const newContent = this.updateFrontmatter(content, tags);
      await this.app.vault.modify(file, newContent);
    }
  }
  getFrontmatter(content) {
    const match = content.match(/^---\n([\s\S]*?)\n---/);
    return match ? match[1] : "";
  }
  getTags(frontmatter) {
    const tagsMatch = frontmatter.match(/tags:\s*\[(.*?)\]/);
    if (!tagsMatch)
      return [];
    return tagsMatch[1].split(",").map((tag) => tag.trim());
  }
  updateFrontmatter(content, tags) {
    const frontmatter = this.getFrontmatter(content);
    const tagsLine = `tags: [${tags.join(", ")}]`;
    if (frontmatter) {
      const updatedFrontmatter = frontmatter.replace(/tags:.*/, tagsLine);
      return content.replace(/^---\n[\s\S]*?\n---/, `---
${updatedFrontmatter}
---`);
    } else {
      return `---
${tagsLine}
---
${content}`;
    }
  }
  async addFolderTag(file) {
    const folderTag = this.getFolderTag(file.path);
    if (folderTag) {
      await this.addTagToFile(file, folderTag);
    }
  }
  async handleNewFile(file) {
    const folderTag = this.getFolderTag(file.path);
    if (folderTag) {
      await this.addTagToFile(file, folderTag);
    }
  }
  async handleFileMove(file, oldPath) {
    const oldFolderTag = this.getFolderTag(oldPath);
    const newFolderTag = this.getFolderTag(file.path);
    if (oldFolderTag && newFolderTag && oldFolderTag !== newFolderTag) {
      await this.removeTagFromFile(file, oldFolderTag);
      await this.addTagToFile(file, newFolderTag);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
